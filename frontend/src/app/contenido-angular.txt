<!-- src/app/components/countries/countries.component.html -->
<div class=" mt-4">
  <label for="pais" class="form-label">Seleccione un paÃ­s</label>
  <select id="pais" class="form-select" [(ngModel)]="selectedId" (change)="onSelect()">
    <option value="" disabled selected>-- Seleccione --</option>
    <option *ngFor="let c of countries" [value]="c.id">{{ c.nombre }}</option>
  </select>

  <p *ngIf="selectedId">
    ID seleccionado: {{ selectedId }}
  </p>
</div>




// src/app/components/countries/countries.component.ts
import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CountriesService } from '../../services/countries/countries';




@Component({
  selector: 'app-countries',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './countries.html',
  styleUrls: ['./countries.css']
})
export class CountriesComponent implements OnInit {
  countries: any[] = [];
  selectedId: number | null = null;

  constructor(private countriesService: CountriesService) {}

  ngOnInit(): void {
    this.countriesService.getAllCountries().subscribe({
      next: (data) => this.countries = data,
      error: (err) => console.error('Error al cargar paÃ­ses', err)
    });
  }

 @Output() selected = new EventEmitter<number>(); // EMITE el ID del paÃ­s

onSelect() {
  if (this.selectedId !== null && this.selectedId !== undefined) {
    const selected = this.countries.find(c => c.id === this.selectedId);
    console.log('PaÃ­s seleccionado:', selected);
    this.selected.emit(this.selectedId); // Emitimos el ID
  }
}
}

<!--<div *ngIf="states.length > 0">
  <label for="estado" class="form-label mt-3">Seleccione un estado / regiÃ³n</label>
  <select id="estado" class="form-select"
          [(ngModel)]="selectedStateId">
    <option value="" disabled selected>-- Seleccione --</option>
    <option *ngFor="let s of states" [value]="s.id">{{ s.nombre }}</option>
  </select>

  <p *ngIf="selectedStateId">
    ID estado: {{ selectedStateId }}
  </p>
</div>

<div *ngIf="countryId && states.length === 0" class="mt-3">
  <em>No hay estados para este paÃ­s</em>
</div>   -->

<div class="mt-3">
  <label for="estado" class="form-label">Seleccione un estado / regiÃ³n</label>
  <select id="estado" class="form-select" [(ngModel)]="selectedStateId" [disabled]="states.length === 0" (change)="selected.emit(selectedStateId!)">
    <option value="" disabled selected>-- Seleccione --</option>
    <option *ngFor="let s of states" [value]="s.id">{{ s.nombre }}</option>
  </select>

  <div *ngIf="states.length === 0" class="form-text text-muted mt-1">
    
  </div>

  <p *ngIf="selectedStateId" class="mt-2">
    ID estado: {{ selectedStateId }}
  </p>
</div>


import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { StatesService } from '../../services/states/states';
import { Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-states',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './states.html',
  styleUrls: ['./states.css']
})
export class StatesComponent implements OnChanges {
  /** recibe el ID de paÃ­s desde el padre */
  @Input() countryId: number | null = null;
  @Output() selected   = new EventEmitter<number>();
  
  states: any[] = [];
  selectedStateId: number | null = null;

  constructor(private statesService: StatesService) {}

  ngOnChanges(ch: SimpleChanges): void {
    if (ch['countryId'] && this.countryId != null) {
      this.loadStates();
    }
  }

  private loadStates() {
    this.statesService.getStatesByCountry(this.countryId!).subscribe({
      next: (data) => this.states = data,
      error: (err) => console.error('Error al cargar estados', err)
    });
  }
}

<div class=" container  " >
  <h2 class="text-center mb-4">Formulario de Usuario</h2>

  <form #f="ngForm" (ngSubmit)="save()">
    <!-- Nombre -->
    <div class="mb-3">
      <label class="form-label">Nombre</label>
      <input name="nombre" class="form-control" required [(ngModel)]="model.nombre">
    </div>

    <!-- Apellido -->
    <div class="mb-3">
      <label class="form-label">Apellido</label>
      <input name="apellido" class="form-control"  required [(ngModel)]="model.apellido">
    </div>

    <!-- Edad -->
    <div class="mb-3">
      <label class="form-label">Edad</label>
      <input type="number" name="edad" class="form-control" min="0" required [(ngModel)]="model.edad">
    </div>

    <!-- Combos dependientes -->
    <app-countries (selected)="onCountry($event)"></app-countries>

    <app-states  [countryId]="model.countryId" (selected)="model.stateId = $event"> </app-states>

    <button class="btn btn-success mt-3" [disabled]="f.invalid || !model.stateId">
      Guardar
    </button>
  </form>

  <!-- Tabla -->
  <h3 class="text-center mt-5">Usuarios registrados</h3>
  <table class="table table-striped mt-3" *ngIf="users.length">
    <thead>
      <tr>
        <th>#</th><th>Nombre</th><th>Apellido</th><th>Edad</th>
        <th>PaÃ­s-ID</th><th>Estado-ID</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let u of users">
        <td>{{u.id}}</td><td>{{u.nombre}}</td><td>{{u.apellido}}</td>
        <td>{{u.edad}}</td><td>{{u.countryId}}</td><td>{{u.stateId}}</td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="!users.length" class="mt-3">
    <em>AÃºn no hay usuarios registrados.</em>
  </div>
</div>

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule }  from '@angular/forms';
import { CountriesComponent } from '../countries/countries';
import { StatesComponent    } from '../states/states';
import { UserDTO, UsersService } from '../../services/users/users';


@Component({
  selector: 'app-user-form',
  standalone: true,
  imports: [CommonModule, FormsModule, CountriesComponent, StatesComponent],
  templateUrl: './user-form.html',
  styleUrls: ['./user-form.css']
})
export class UserFormComponent implements OnInit {
  /** modelo que enlazamos al formulario */
  model: UserDTO = {
    nombre: '', apellido: '', edad: 0,
    countryId: 0, stateId: 0
  };

  users: any[] = [];         // lista para la tabla

  constructor(private usersSrv: UsersService) {}

  ngOnInit(): void {
    this.loadUsers();
  }

  /** recibe el id del paÃ­s desde <app-countries> */
  onCountry(id: number) {
    this.model.countryId = id;
    this.model.stateId   = 0;  //   reset combobox estado
  }

  /** POST -> backend y refresca tabla */
  save() {
    this.usersSrv.add(this.model).subscribe({
      next: () => {
        this.resetForm();
        this.loadUsers();
      },
      error: err => console.error('Error al guardar', err)
    });
  }

  private loadUsers() {
    this.usersSrv.getAll().subscribe({
      next: data => this.users = data,
      error: err  => console.error('Error al cargar users', err)
    });
  }

  private resetForm() {
    this.model = { nombre:'', apellido:'', edad:0, countryId:0, stateId:0 };
  }
}


import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class CountriesService {
  // Ruta del backend que devuelve todos los paÃ­ses
  private readonly APP_SERVER = 'http://localhost:8080/api/v1/countries';

  constructor(private httpClient: HttpClient) {}

  // MÃ©todo que llama al backend y devuelve todos los paÃ­ses
  public getAllCountries(): Observable<any> {
    return this.httpClient.get(this.APP_SERVER);
  }



  
}

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class StatesService {
  /** Endpoint que filtra por paÃ­s */
  private readonly url = 'http://localhost:8081/api/v1/states/country';

  constructor(private http: HttpClient) {}

  /** Devuelve los estados del paÃ­s indicado */
  getStatesByCountry(countryId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.url}/${countryId}`);
  }
}

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface UserDTO {          // â¬…ï¸ exactamente el JSON que pide el backend
  
  nombre:     string;
  apellido:   string;
  edad:       number;
  countryId:  number;
  stateId:    number;
}

/** Lo que recibes del backend: incluye el id generado */
export interface User extends UserDTO {
  id: number;
}

@Injectable({ providedIn: 'root' })
export class UsersService {
  private readonly url = 'http://localhost:8082/api/v1/users';

  constructor(private http: HttpClient) {}

  /** POST: crea usuario y devuelve el User completo (con id) */
  add(user: UserDTO): Observable<User> {
    return this.http.post<User>(this.url, user);
  }

 /** GET: devuelve la lista tipada de usuarios */
  getAll(): Observable<User[]> {
    return this.http.get<User[]>(this.url);
  }
}

import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';

export const appConfig: ApplicationConfig = {
  providers: [
    provideBrowserGlobalErrorListeners(),
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),provideHttpClient(),
  ]
};


<a routerLink="/user-form" class="btn btn-primary">Ir a Formulario de Usuario</a>
<router-outlet />

import { Routes } from '@angular/router';
import { CountriesComponent } from './components/countries/countries';
import { UserFormComponent } from './components/user-form/user-form';

export const routes: Routes = [


{
    path: 'countries',
    component: CountriesComponent
  },
   { path: 'user-form', component: UserFormComponent }
 

];

import { TestBed } from '@angular/core/testing';
import { App } from './app';

describe('App', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [App],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(App);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(App);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, frontend_isa');
  });
});

import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { RouterModule } from '@angular/router';  
@Component({
  selector: 'app-root',
  imports: [RouterOutlet,RouterModule],
  templateUrl: './app.html',
  styleUrl: './app.css'
})
export class App {
  protected title = 'frontend_isa';
}

